ints <- boot3 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = mean-plusminus,
CI_High = mean+plusminus)
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = mean-plusminus,
CI_High = mean+plusminus)
View(ints)
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = mean-plusminus %>% round(3),
CI_High = mean+plusminus)
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = (mean-plusminus) %>% round(3),
CI_High = mean+plusminus)
CI_High = round(mean+plusminus, 3)
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = round(mean-plusminus, 3),
CI_High = round(mean+plusminus, 3))
))))
ints <- boot2 %>% select(.metric, mean, std_err) %>% mutate(plusminus = 1.96*std_err,
CI_Low = round(mean-plusminus, 3),
CI_High = round(mean+plusminus, 3))
ints %>% datatable()
ints <- boot2 mutate(plusminus = 1.96*std_err,
ints <- boot2 %>% mutate(plusminus = 1.96*std_err,
CI_Low = round(mean-plusminus, 3),
CI_High = round(mean+plusminus, 3)) %>%
select(CI_Low, CI_High)
ints %>% datatable()
ints <- boot2 %>% mutate(plusminus = 1.96*std_err,
CI_Low = round(mean-plusminus, 3),
CI_High = round(mean+plusminus, 3)) %>%
select(.metric, CI_Low, CI_High)
ints %>% datatable()
boot2 <-  wf %>%
fit_resamples(resamples, metrics=metric_set(rmse, mae), control=control_resamples(save_pred=TRUE)) %>%
collect_metrics()
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(cache=TRUE, autodep=TRUE)
knitr::opts_chunk$set(fig.align="center")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=40), tidy=TRUE)
#| warning: FALSE
#| message: FALSE
library(tidyverse)
library(tidymodels)
library(GGally)
library(patchwork)
library(discrim)
library(probably)
library(caret)
library(doParallel)
cl <- makePSOCKcluster(parallel::detectCores(logical=FALSE))
registerDoParallel(cl)
set.seed(1)
#| warning: FALSE
#| message: FALSE
pixel_data <- readr::read_csv("https://gedeck.github.io/DS-6030/project/HaitiPixels.csv")
Data <- pixel_data %>%
mutate(Class = ifelse(Class=="Blue Tarp", "BlueTarp", "No")) %>%
mutate(Class=factor(Class, levels = c("BlueTarp", "No")))
#| fig.cap: Correlation Plot Matrix for Relationship Between Colors
#| dev: png
#| dpi: 300
#| warning: FALSE
#| message: FALSE
#| cache: TRUE
ggpairs(Data[1:4],aes(color = Class, alpha = 0.2)) +
scale_color_manual(values = c(BlueTarp = "Blue", No = "Red"))+
scale_fill_manual(values=c(BlueTarp = "Blue", No = "Red"))
#| fig.cap: Breakdown of Class Levels
#| warning: FALSE
#| message: FALSE
#| cache: TRUE
ggplot(Data) +
geom_bar(aes(x = Class), alpha = 0.5) +
scale_fill_discrete(c("Blue", "Red")) +
labs(y = "Count")
#| cache: TRUE
formula <- Class ~ Red + Blue + Green
pixels_recipe <- recipe(formula, data=Data) %>%
step_normalize(all_numeric_predictors())
#| cache: TRUE
resamples <- vfold_cv(Data, v=10, strata=Class)
metrics <- metric_set(roc_auc)
cv_control <- control_resamples(save_pred=TRUE)
#| cache: TRUE
roc_cv_plot <- function(model_cv) {
cv_predictions <- collect_predictions(model_cv)
cv_ROC <- cv_predictions %>%
roc_curve(truth=Class, .pred_BlueTarp, event_level="first")
autoplot(cv_ROC)
}
#| cache: TRUE
threshold_graph <- function(model_cv, model_name) {
performance <- probably::threshold_perf(collect_predictions(model_cv), Class, .pred_BlueTarp, thresholds=seq(0.01, 0.95, 0.01), event_level="first", metrics=metric_set(bal_accuracy, yardstick::sensitivity, yardstick::specificity, yardstick::precision))
max_metrics <- performance %>%
group_by(.metric) %>%
filter(.estimate == max(.estimate))
ggplot(performance, aes(x=.threshold, y=.estimate, color=.metric)) +
geom_line() +
geom_point(data=max_metrics, color="black") +
labs(x="Threshold", y="Metric value") +
coord_cartesian(ylim=c(0, 1))
}
#| cache: TRUE
metrics_table <- function(metrics, caption) {
metrics %>%
pivot_wider(names_from=.metric, values_from=.estimate) %>%
dplyr::select(-.estimator) %>% mutate(TPR = .$sens, FPR = 1 - .$spec, sens = NULL, spec = NULL) %>%
knitr::kable(caption=caption, digits=3) %>%
kableExtra::kable_styling(full_width=FALSE)
}
#| cache: TRUE
svm_linear_spec <-  svm_linear(mode="classification",
engine="kernlab",
margin = tune(),
cost=tune())
svm_linear_wf <- workflow() %>%
add_recipe(pixels_recipe) %>%
add_model(svm_linear_spec)
tune_results_linear <- tune_bayes(svm_linear_wf,
resamples=resamples,
iter = 25)
#| cache: TRUE
svm_poly_spec <-  svm_poly(mode="classification",
engine="kernlab",
margin = tune(),
degree=tune(),
cost=tune())
svm_poly_wf <- workflow() %>%
add_recipe(pixels_recipe) %>%
add_model(svm_poly_spec)
tune_results_poly <- tune_bayes(svm_poly_wf,
resamples=resamples,
iter = 25)
#| cache: TRUE
svm_rb_spec <-  svm_rbf(mode="classification",
engine="kernlab",
margin = tune(),
rbf_sigma=tune(),
cost=tune())
svm_rb_wf <- workflow() %>%
add_recipe(pixels_recipe) %>%
add_model(svm_rb_spec)
parameters <- extract_parameter_set_dials(svm_rb_wf) %>%
update(rbf_sigma = rbf_sigma(range = c(-7,0), trans = log10_trans()))
tune_results_rb <- tune_bayes(svm_rb_wf,
resamples=resamples,
param_info=parameters,
iter = 10)
View(tune_results_rb)
View(tune_results_rb[[4]][[1]])
View(tune_results_rb[[3]][[1]])
#| cache: TRUE
#| fig.cap: AUC and Accuracy for SVM Linear Kernal Model
autoplot(tune_results_linear)
#| cache: TRUE
#| fig.cap: Best Margin Value, Cost Value, and AUC for SVM Linear Kernal Model
show_best(tune_results_linear, metric='roc_auc', n=1) %>%
dplyr::select(.metric, mean, margin, cost) %>%
pivot_wider(names_from=".metric", values_from="mean") %>%
knitr::kable(caption="Best Margin Value, Cost Value, and AUC", digits=3)
#| cache: TRUE
svm_linear_tuned_wf <- svm_linear_wf %>%
finalize_workflow(select_best(tune_results_linear, metric="roc_auc"))
svm_linear_tuned_cv <- svm_linear_tuned_wf %>%
fit_resamples(resamples=resamples, control=control_resamples(save_pred=TRUE))
#| cache: TRUE
svm_poly_tuned_wf <- svm_poly_wf %>%
finalize_workflow(select_best(tune_results_poly, metric="roc_auc"))
svm_poly_tuned_cv <- svm_poly_tuned_wf %>%
fit_resamples(resamples=resamples, control=control_resamples(save_pred=TRUE))
#| cache: TRUE
svm_rb_tuned_wf <- svm_rb_wf %>%
finalize_workflow(select_best(tune_results_rb, metric="roc_auc"))
svm_rb_tuned_cv <- svm_rb_tuned_wf %>%
fit_resamples(resamples=resamples, control=control_resamples(save_pred=TRUE))
svm_linear_preds <- svm_linear_trained %>%
augment(Data)
svm_linear_preds
SVM_LIN_preds <- svm_linear_trained %>% collect_predictions()
SVM_LIN_preds <- svm_linear_tuned_cv %>% collect_predictions()
for (i in seq(0, .25, .05)){
print(i)
print(confMat(svm_linear_tuned_cv, i))
}
#| cache: TRUE
confMat <- function(preds, threshold=.5){
data.frame(
Actual = c('No', 'BlueTarp'),
Predicted_No = c(nrow(filter(preds, .pred_BlueTarp<threshold, Class == 'No')),
nrow(filter(preds, .pred_BlueTarp<threshold, Class == 'BlueTarp'))),
Predicted_BlueTarp = c(nrow(filter(preds, .pred_BlueTarp>=threshold, Class == 'No')),
nrow(filter(preds, .pred_BlueTarp>=threshold, Class == 'BlueTarp')))
)
}
for (i in seq(0, .25, .05)){
print(i)
print(confMat(svm_linear_tuned_cv, i))
}
View(SVM_LIN_preds)
print(confMat(SVM_LIN_preds, i))
for (i in seq(0, .25, .05)){
print(i)
print(confMat(SVM_LIN_preds, i))
}
for (i in seq(0, .25, .01)){
print(i)
print(confMat(SVM_LIN_preds, i))
}
SVM_POLY_preds <- svm_poly_tuned_cv %>% collect_predictions()
SVM_RB_preds <- svm_rb_tuned_cv %>% collect_predictions()
for (i in seq(0, .25, .01)){
print(i)
print(confMat(SVM_POLY_preds, i))
}
for (i in seq(0, .25, .01)){
print(i)
print(confMat(SVM_RB_preds, i))
}
Threshold_SVML <- probably::threshold_perf(SVM_LIN_preds, Class, .pred_BlueTarp,
metrics = metric_set(accuracy, yardstick::sens, yardstick::spec, bal_accuracy, yardstick::precision),
thresholds = seq(0, 1, by = .01), event_level = 'first')
Threshold_SVMP <- probably::threshold_perf(SVM_POLY_preds, Class, .pred_BlueTarp,
metrics = metric_set(accuracy, yardstick::sens, yardstick::spec, bal_accuracy, yardstick::precision),
thresholds = seq(0, 1, by = .01), event_level = 'first')
Threshold_SVMP <- probably::threshold_perf(SVM_POLY_preds, Class, .pred_BlueTarp,
metrics = metric_set(accuracy, yardstick::sens, yardstick::spec, bal_accuracy, yardstick::precision),
thresholds = seq(0, 1, by = .01), event_level = 'first')
Threshold_SVMR <- probably::threshold_perf(SVM_RB_preds, Class, .pred_BlueTarp,
metrics = metric_set(accuracy, yardstick::sens, yardstick::spec, bal_accuracy, yardstick::precision),
thresholds = seq(0, 1, by = .01), event_level = 'first')
FinalMetrics_SVMR <- Threshold_SVMR %>% filter(.threshold %in% c(.03, .08)) %>%
left_join(descTable, by = '.threshold') %>%
filter(.metric %in% c('Model', 'Importance', 'bal_accuracy', 'precision', 'sens', 'spec'))
descTable <- data.frame(.threshold = c(.03, .08), Importance = c('Best for Balanced Accuracy', 'Best for MTA'),
Model = rep('SVM_RadialBasis', 2))
FinalMetrics_SVMR <- Threshold_SVMR %>% filter(.threshold %in% c(.03, .08)) %>%
left_join(descTable, by = '.threshold') %>%
filter(.metric %in% c('Model', 'Importance', 'bal_accuracy', 'precision', 'sens', 'spec'))
View(FinalMetrics_SVMR)
FinalMetrics_SVM <- rbind(FinalMetrics_SVML, FinalMetrics_SVMP, FinalMetrics_SVMR)
library(tidyverse)
library(openxlsx)
getwd()
openxlsx::read.xlsx('Downloads/UsageData.xlsx')
library(readxl)
UsageData <- read_excel("Downloads/UsageData.xlsx")
View(UsageData)
df <- read_excel("Downloads/UsageData.xlsx")
View(df)
UsageData <- read_excel("Downloads/UsageData.xlsx")[3:]
UsageData <- read_excel("Downloads/UsageData.xlsx")[3:51]
df <- UsageData %>% pivot_longer(starts_with('\\d'), names_to = 'Time', values_to = 'Usage')
starts_with('\\d')
df <- UsageData %>% pivot_longer(2:49, names_to = 'Time', values_to = 'Usage')
df <- UsageData %>% pivot_longer(2:49, names_to = 'Time', values_to = 'Usage') %>%
group_by(Time) %>% summarise(Usage = mean(Usage))
df <- UsageData %>% pivot_longer(2:49, names_to = 'Time', values_to = 'Usage') %>%
mutate(Order = row_number())
df <- UsageData %>% pivot_longer(2:49, names_to = 'Time', values_to = 'Usage') %>%
mutate(Order = row_number()) %>%
group_by(Time) %>% summarise(Usage = mean(Usage), Order = min(Order)) %>%
arrange(Order)
df %>% ggplot(aes(x=Time, y = Usage))+
geom_path()
df %>% ggplot(aes(x=Time, y = Usage))+
geom_line()
df %>% ggplot(aes(x=Order, y = Usage))+
geom_line()
rbeta(1000, 4, 16)
x <- data.frame(Wholesale = runif(1000, min = 1, max = 1000))
betas <- rbeta(1000, 4, 16)
betas <- 1 + (2*rbeta(1000, 4, 16))
x <- data.frame(Wholesale = runif(1000, min = 1, max = 1000)) %>%
mutate(WithMarkup = Wholesale * betas)
library(tidyverse)
x <- data.frame(Wholesale = runif(1000, min = 1, max = 1000)) %>%
mutate(WithMarkup = Wholesale * betas)
View(x)
x %>% ggplot(aes(x = Wholesale, y = WithMarkup))+
geom_point() +
geom_smooth()
x %>% ggplot(aes(x = Wholesale, y = WithMarkup))+
geom_point() +
geom_smooth() +
geom_line(data = data.frame(Wholesale = 1:1000, WithMarkup = 1:1000), col='red')
betas <- 1 + (2*rbeta(1000, 6, 16))
x <- data.frame(Wholesale = runif(1000, min = 1, max = 1000)) %>%
mutate(WithMarkup = Wholesale * betas)
x %>% ggplot(aes(x = Wholesale, y = WithMarkup))+
geom_point() +
geom_smooth() +
geom_line(data = data.frame(Wholesale = 1:1000, WithMarkup = 1:1000), col='red')
x %>% ggplot(aes(x = Wholesale, y = WithMarkup))+
geom_point() +
geom_smooth() +
geom_line(data = data.frame(Wholesale = 1:1000, WithMarkup = 1:1000), col='red') +
labs(title = 'Aidans idea for PBM plot')
library(tidyverse)
`%like%` <- function(x, y){return((1:length(x)) %in% do.call(c, lapply(y, grep, x=x)))}
`%notlike%` <- function(x, y){return(!((1:length(x)) %in% do.call(c, lapply(y, grep, x=x))))}
groupr <- function(df, newname, col, tests, vals = NULL, catchall = F){
if(nrow(df)==0){
warning('Empty df in groupr')
return(df)
}
if(is_null(vals)){vals <- tests}
vec <- df[[col]]
len <- length(vec)
g <- lapply(tests, grep, x=vec)
out <- if(isFALSE(catchall)){vec} else {rep(catchall, len)}
for (ind in length(g):1){ out[g[[ind]]] <- vals[ind] }
df[[newname]] <- out
return(df)
}
setwd('/Users/yungzig/Desktop/CSProjects/Soccer/SoccerManager')
clearOutput <- function(){unlink('Output/*')}
EUROreformPI <- function(){
ChampsLeaguePlayin <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLP'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(PATH = strsplit(strsplit(x, 'Fixtures')[[1]][1], '_')[[1]][2] %>% as.numeric())}))
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLP'], envir = .GlobalEnv)
unlink('Output/CLP_*')
EuropaLeaguePlayin <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ELP'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(PATH = strsplit(strsplit(x, 'Fixtures')[[1]][1], '_')[[1]][2] %>% as.numeric())}))
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ELP'], envir = .GlobalEnv)
unlink('Output/ELP_*')
ConfLeaguePlayin <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ECP'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(PATH = strsplit(strsplit(x, 'Fixtures')[[1]][1], '_')[[1]][2] %>% as.numeric())}))
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ECP'], envir = .GlobalEnv)
unlink('Output/ECP_*')
}
EUROreformGS <- function(){
ChampsLeague <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLG'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(GROUP = strsplit(strsplit(x, 'Standings')[[1]][1], '_')[[1]][2])})) %>%
select(GROUP, everything())
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLG'], envir = .GlobalEnv)
unlink('Output/CLG_*')
EuropaLeague <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ELG'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(GROUP = strsplit(strsplit(x, 'Standings')[[1]][1], '_')[[1]][2])})) %>%
select(GROUP, everything())
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ELG'], envir = .GlobalEnv)
unlink('Output/ELG_*')
ConferenceLeague <<- do.call(rbind, ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ECG'] %>% as.list() %>%
lapply(function(x){get(x) %>%
mutate(GROUP = strsplit(strsplit(x, 'Standings')[[1]][1], '_')[[1]][2])})) %>%
select(GROUP, everything())
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'ECG'], envir = .GlobalEnv)
unlink('Output/ECG_*')
}
readOutput <- function(){
rm(list = ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %>% as.list() %>%
lapply(function(x){get(x) %>% class()}) %>%
unlist() != 'function' & ls(envir = .GlobalEnv) %notlike% 'League'],
envir = .GlobalEnv)
for (file in list.files('Output')){
print(file)
name <- strsplit(file, '[.]')[[1]][1]
assign(name, read.csv(paste0('Output/', file)), envir = .GlobalEnv)
}
WinnersWide <<- Winners %>% pivot_wider(names_from = 'Year', values_from = 'Team')
if(ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLP'] %>% length() > 0){
EUROreformPI()
}
if(ls(envir = .GlobalEnv)[ls(envir = .GlobalEnv) %like% 'CLG'] %>% length() > 0){
EUROreformGS()
}
}
teamResults <- function(team){
one <- Results %>% filter(Home %like% team | Away %like% team)
#keeps <- one %>% select(Year, Competition, Round, Notes)
new <- one %>% mutate(
Team = ifelse(Home %like% team, Home, Away), TeamScore = ifelse(Home %like% team, HomeScore, AwayScore),
Opp = ifelse(Home %like% team, Away, Home), OppScore = ifelse(Home %like% team, AwayScore, HomeScore),
Type = ifelse(Notes %like% c('Neutral', 'No Game'), 'Neutral', ifelse(Home %like% team, 'Home', 'Away'))
)
new %>% select(Year, Competition, Round, Type, Team, TeamScore, OppScore, Opp, Notes)
}
#clearOutput()
readOutput()
WHU <- teamResults('West Ham')
PSG <- teamResults('Manchester City')
teamResults('Liverpool')
#clearOutput()
readOutput()
View(Results)
View(ENGCFixtures)
View(Directory)
View(ENG1Standings)
View(DEN1Standings)
View(ChampsLeague)
View(BEL1Standings)
View(ConferenceLeague)
#clearOutput()
readOutput()
WHU <- teamResults('West Ham')
View(WHU)
View(ChampsLeague)
View(ChampsLeaguePlayin)
View(CLKFixtures)
clearOutput()
#clearOutput()
readOutput()
View(ConferenceLeague)
View(ENG1Standings)
View(ITA1Standings)
View(NED1Standings)
View(POR1Standings)
View(SCO1Standings)
View(GER1Standings)
#clearOutput()
readOutput()
View(ChampsLeague)
#clearOutput()
readOutput()
#clearOutput()
readOutput()
#clearOutput()
readOutput()
View(ENGCFixtures)
y <- teamResults('Man City')
View(y)
WHU <- teamResults('West Ham')
#clearOutput()
readOutput()
WHU <- teamResults('West Ham')
View(WHU)
#clearOutput()
readOutput()
View(ChampsLeague)
View(ConfLeaguePlayin)
View(CLKFixtures)
View(ELKFixtures)
View(ENG2Standings)
View(ENGCFixtures)
#clearOutput()
readOutput()
View(ENG2Standings)
#clearOutput()
readOutput()
y <- teamResults('Man United')
View(y)
#clearOutput()
readOutput()
#clearOutput()
readOutput()
View(GERCFixtures)
View(NEDCFixtures)
View(SCO1Standings)
View(SCO1Standings)
View(TUR1Standings)
View(TURCFixtures)
View(WinnersWide)
#clearOutput()
readOutput()
View(SCOCFixtures)
View(ENGCFixtures)
View(Results)
#clearOutput()
readOutput()
View(ChampsLeague)
View(CLKFixtures)
View(Results)
View(ECKFixtures)
View(EuropaLeague)
y <- teamResults('Brighton')
View(y)
WHU <- teamResults('West Ham')
View(WHU)
#clearOutput()
readOutput()
View(Winners)
View(Results)
#clearOutput()
readOutput()
View(ENG2Standings)
#clearOutput()
readOutput()
View(ENG2Standings)
View(ENG2PFixtures)
#clearOutput()
readOutput()
View(GER1Standings)
View(GER2Standings)
View(FRA1Standings)
View(FRA2PFixtures)
View(FRA2Standings)
#clearOutput()
readOutput()
View(WinnersWide)
#clearOutput()
readOutput()
#clearOutput()
readOutput()
View(EuropaLeague)
View(ChampsLeague)
View(ChampsLeaguePlayin)
View(CLKFixtures)
View(EuropaLeaguePlayin)
View(Directory)
View(Directory)
y <- Directory %>% group_by(Team) %>% mutate(n = n()) %>% filter(n!= 2)
View(y)
y <- Directory %>% arrange(-BaseRating) %>% mutate(row_number())
y <- Directory %>% filter(Year == 1)
y <- Directory %>% filter(Year == 1) %>%
arrange(-BaseRating) %>% mutate(row_number())
